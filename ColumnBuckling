import math as ma
import matplotlib.pyplot as plt

def ColumnBuckling(StringerI,InterRibDistance,StringerA):
    K = 1 #estimate for pins
    E = 72.4 * 10**9

    CriticalStress = K * ma.pi**2 * E * StringerI / (InterRibDistance**2) / StringerA
    return(CriticalStress)

def MaxStress(RibDistances,h,b,t):

    StringerArea = h * t + (b-t) * t
    StringerIxx = I(h,b,t)[0]

    xtab = [0]
    ytab = []
    MaxStressList = []
    RibsNumber = len(RibDistances)

    for i in range(1,RibsNumber):
        Length = RibDistances[i] - RibDistances[i-1]
        MaxStressLocal = ColumnBuckling(StringerIxx,Length,StringerArea)
        MaxStressList.append(MaxStressLocal)

        xtab.append(RibDistances[i]-0.01)
        xtab.append(RibDistances[i]+0.01)

        ytab.append(MaxStressLocal)
        ytab.append(MaxStressLocal)
    
    xtab.pop(-1)

    return(MaxStressList,xtab,ytab)

def GetMaxStress(InterRibDistance,MaxStressList,y):
    # Check if the input value is out of range
    if y < InterRibDistance[0] or y > InterRibDistance[-1]:
        raise ValueError("Input value is out of the specified distance range.")
    
    # Loop through the segments to find the appropriate one
    for i in range(len(InterRibDistance) - 1):
        if InterRibDistance[i] <= y < InterRibDistance[i + 1]:
            return MaxStressList[i]
    
    if y == InterRibDistance[-1]:
        return MaxStressList[-1]

def AppliedCompression(MomentList,yList,IList,RootMaxSpar,TipMaxSpar):

    Compression = []
    for i in range(len(MomentList)):

        SparLength = RootMaxSpar - (RootMaxSpar - TipMaxSpar) * yList [i] / 13.75

        MaxCompressiveStress = (SparLength/2) * MomentList[i] / IList [i]
        Compression.append(MaxCompressiveStress)

        return(yList,MaxCompressiveStress)
    
def BigBuckling(AppliedCompressionList,yList,InterRibDistance,h,b,t):

    AllowedCompressionList = MaxStress(InterRibDistance,h,b,t)

    MarginList = []

    for i in range(len(yList)):
        y = yList[i]
        MaxAllowed = GetMaxStress(InterRibDistance,AllowedCompressionList[0],y)
        Applied = AppliedCompressionList[i]
        Margin = MaxAllowed / Applied
        MarginList.append(Margin)

    xtaballowed = AllowedCompressionList[1]
    ytaballowed = AllowedCompressionList[2]
    xtabapplied = yList
    ytabapplied = AppliedCompressionList
    xtabMargin = yList
    ytabMargin = MarginList

    return(xtaballowed, ytaballowed, xtabapplied, ytabapplied, xtabMargin, ytabMargin)








def I(h,b,t):
    A_1 = h * t
    xd_1 = t / 2
    yd_1 = h / 2

    A_2 = (b - t) * t
    xd_2 = t + (b - t) / 2
    yd_2 = t / 2

    total_area = A_1 + A_2

    x_bar = (xd_1 * A_1 + xd_2 * A_2) / total_area
    y_bar = (yd_1 * A_1 + yd_2 * A_2) / total_area

    I_x_1 = 1/12 * t * h**3
    I_y_1 = 1/12 * h * t**3

    I_x_2 = 1/12 * (b - t) * t**3
    I_y_2 = 1/12 * t * (b - t)**3

    I_xx = I_x_1 + A_1 * (yd_1 - y_bar)**2 + I_x_2 + A_2 * (yd_2 - y_bar)**2 
    I_yy = I_y_1 + A_1 * (xd_1 - x_bar)**2 + I_y_2 + A_2 * (xd_2 - x_bar)**2
    I_xy = A_1 * (yd_1 - y_bar) * (xd_1 - x_bar) + A_2 * (yd_2 - y_bar) * (xd_2 - x_bar) 

    return(I_xx,I_yy,I_xy)
